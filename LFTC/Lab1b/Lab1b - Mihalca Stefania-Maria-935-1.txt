-------------------------------------
Lexic.txt
-------------------------------------

Alphabet:
    a. Uppercase and lowercase letters from the english alphabet: ([A-Za-z])
    b. Digits: [0-9]

Lexic:
    a. Special symbols, representing:
        - operators: + - * / = < <= = >= == != ! && ||
        - separators: { } ( ) [ ] ; <space> 
        - reserved words: start, end, int, str, arr, char, bool, true, false, scan, print, if, elif, else, while, for

    b. Identifiers
        - a sequence of letters and digits, such that the first character is a letter and the rest of the characters are either letters or digits.

        Identifier = Letter | Letter {Letter | Digit}
        Letter = UppercaseLetter | LowercaseLetter
        UppercaseLetter = "A" | "B" | . ..| "Z" 
        LowercaseLetter = "a" | "b" | ... | "z"
        Digit = "0" | NonZeroDigit
        NonZeroDigit = "1" | ... | "9"

    c. Constants
        1. integer
            IntegerConstant = "0" | ["+" | "-"] NonZeroDigit {Digit}

        2. character
            Character = 'Letter' | 'Digit'

        3. string
            ConstString = "StringConstant"
            StringConstant = Char{StringConstant}
            Char = Letter | Digit

        4. boolean
            BooleanConstant = "true" | "false"

        Constant = IntegerConstant | CharacterConstant | StringConstant | BooleanConstant


---------------------------------------------
token.in
---------------------------------------------

(
)
[
]
{
}
;
<space>
+
-
*
/
=
<
>
<=
>=
==
!=
!
&&
||
start
end
int
str
char
bool
true
false
arr
scan
print
if
elif
else
while
for

----------------------------------------
Syntax.in 
----------------------------------------

Program = "start" CompoundStatement "end"

SimpleType = "int" | "str" | "char" | "bool"

ArrayType = SimpleType " " "arr" "[" IntegerConstant "]"

Type = SimpleType | ArrayType

Declaration = Type " " Identifier

StatementList = Statement ";" | Statement ";" StatementList

Statement = SimpleStatement | StructureStatement

CompoundStatement = "{" StatementList "}"

SimpleStatement = (AssignmentStatement | BoolAssignmentStatement | InputOutputStatement | Declaration) ";" 

StructureStatement = CompoundStatement | IfStatement | WhileStatement | ForStatement

IfStatement = "if" Condition Statement {"elif" Condition Statement} ["else" Statement]

ForStatement = "for" "(" "int" AssignmentStatement ";" Condition ";" AssignmentStatement ")" Statement 

WhileStatement = "while" Condition Statement

Expression = [Expression ("+" | "-")] Term

BoolAssignmentStatement = Identifier "= true" | Identifier "= false"

AssignmentStatement = Identifier "=" Expression 

Term = Term("*" | "/") Factor | Factor

Factor = "(" Expression ")" | IntegerConstant | Identifier | IndexedIdentifier

IndexedIdentifier = Identifier "[" IntegerConstant "]"

InputOutputStatement = ("scan" "(" Identifier ")") | ("print" "(" (Identifier | Constant) ")")

Relation = "<" | "<=" | "==" | "!=" | ">=" | ">"

Condition = "(" Expression Relation Expression ")"